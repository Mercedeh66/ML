#Davis's Code
library(broom)
library(lubridate)
library(tidyverse)
#Davis's Code
library(broom)
library(lubridate)
library(tidyverse)
library(gtsummary)
install.packages("gtsummary")
library(broom)
library(visdat)
library(rstatix)
library(reshape2)
library(pheatmap)
library(flextable)
library(officer)
library(dplyr)
library(GGally)
library(rio)
install_formats()
library(rio)
library(janitor)
the_data <- read.csv("~/Desktop/clean data.csv",
header=TRUE,
sep=",",
stringsAsFactors = TRUE)
the_data <- read.csv("~/Desktop/clean_data_Davis.csv",
header=TRUE,
sep=",",
stringsAsFactors = TRUE)
str(the_data)
summary(the_data)
names(the_data)
the_data <- the_data %>%
mutate(sx_outcome= recode(sx_outcome, "1"="Failure", "0"="Success" ))
ncol(the_data)
nrow(the_data)
table(the_data$sex)
table(the_data$plac_b)
#univariate plots
hist(the_data$child_weight, main = "Child's weight", xlab = "weight", ylab = "count", col="red")
boxplot(the_data[, 5:19])
#univariate plots
hist(the_data$child_weight, main = "Child's weight", xlab = "weight", ylab = "count", col="red")
boxplot(the_data[, 5:19])
##bivariate plots showing distribution
plot(the_data$region, the_data$csf_vol)
#univariate plots
hist(the_data$child_weight, main = "Child's weight", xlab = "weight", ylab = "count", col="red")
boxplot(the_data[, 5:19])
boxplot(the_data[, 5:19],par(srt=45))
boxplot(the_data[, 5:19])+text(tick, srt = 45, xpd = TRUE)
boxplot(the_data[, 5:19])+text(srt = 45)
boxplot(the_data[, 5:19],srt = 45)
#univariate plots
hist(the_data$child_weight, main = "Child's weight", xlab = "weight", ylab = "count", col="red")
boxplot(the_data[, 5:19])
View(the_data)
##bivariate plots showing distribution
plot(the_data$region, the_data$csf_vol)
plot(the_data$time_admission, the_data$csf_vol)
ggplot(the_data, aes(brain_vol, child_weight)) + geom_point(aes(color=sx_outcome, size=time_admission))
the_data1 <- subset(the_data, select= -c(snum, place_of_delivery, time_infection))
ncol(the_data1)
##selecting only numeric variables
data_num <- select_if(the_data1, is.numeric)
##correction matrix for all the numeric variables
#method1
cor.mat <- data_num %>% cor_mat()
cor.mat
cor.mat %>% cor_get_pval() #getting significant levels
?cor_mat()
cor.mat
cor.mat %>% cor_get_pval() #getting significant levels
#method2
cor.pmat <- the_data1 %>% cor_pmat()
cor.pmat
? cor_pmat()
#method2
cor.pmat <- the_data1 %>% cor_pmat()
View(the_data1)
cor.mat %>% cor_get_pval() #getting significant levels
?cor_pmat()
#method2
cor.pmat <- the_data1 %>% cor_pmat()
View(data_num)
?cor_mat()
?cor_pmat()
?cor_mat()
class(the_data1)
class(the_data1$time_headincrease)
class(data_num$time_headincrease)
cor.test(the_data1$csf_vol, the_data1$time_headincrease)
-0.1591597 *-0.1591597
##LOGISTIC REGRESSION
names(the_data1)
model_outcome <- the_data1 %>% glm(sx_outcome ~ hydro_etiology + sex + gest + plac_b + time_headincrease +
time_admission + head_circum + wbc + child_weight + season_birth +
csection + csf_vol + brain_vol + region, family = binomial, data=.)
model_outcome <- the_data1 %>% glm(sx_outcome ~ hydro_etiology + sex + gest + plac_b + time_headincrease +
time_admission + head_circum + wbc + child_weight + season_birth +
csection + csf_vol + brain_vol + region, family = binomial, data=.)
data_num3<-as.matrix(data_num)
##correction matrix for all the numeric variables
#Weid odd function is not automatically detecting
#method1
cor.mat <- data_num3 %>% cor_mat()
View(data_num3)
data_num3<-as.matrix(the_data1)
cass(the_data1)
class(data_num3)
#method2
cor.pmat <- data_num3 %>% cor_pmat()
class(data_num3[1])
class(data_num3[6])
data_num3<-as.numeric(the_data1)
class(the_data1)
class(the_data1$sex
)
class(the_data1$sex)
class(the_data3[3])
the_data3[3]
the_data3[,3]
the_data3[3,]
the_data3
data_num3<-as.matrix(the_data1)
the_data3[3,]
the_data3[,3]
class(the_data3)
data_num3[,3]
class(data_num3[,3])
#method2
cor.pmat <- data_num3 %>% cor_pmat()
#method2
cor.pmat <- cor_pmat(data_num3)
rlang::last_error()
data_num3<-as.data.frame(as.matrix(the_data1))
#method2
cor.pmat <- cor_pmat(data_num3)
class(data_num3$sex)
View(data_num3)
class(data_num3$time_headincrease)
class(data_num3$time_admission)
data_num3<-data.frame(lapply(the_data1), stringsAsFactors=FALSE)
i <- sapply(the_data1, is.factor)
the_data1[i] <- lapply(the_data1[i], as.character)
the_data1$sex
class(the_data1$sex)
#method2
cor.pmat <- cor_pmat(the_data1)
cor.pmat
ia <- sapply(the_data1, is.integer)
the_data1[ia] <- lapply(the_data1[ia], as.numeric)
#method2
cor.pmat <- cor_pmat(the_data1)
?cor_pmat()
mydata <- mtcars %>%
select(mpg, disp, hp, drat, wt, qsec)
head(mydata, 3)
dim(mydata <- mtcars %>%
select(mpg, disp, hp, drat, wt, qsec)
head(mydata, 3))
dim(data_num3)
View(mydata <- mtcars %>%
select(mpg, disp, hp, drat, wt, qsec)
head(mydata, 3))
View(data_num3)
cor.mat <- mydata %>% cor_mat()
cor.mat
mydata
##correction matrix for all the numeric variables
#Weid odd function is not automatically detecting
#method1
cor.mat <- data_num %>% cor_mat()
View(cor.mat)
##You need to make sure you do this
##selecting only numeric variables
data_num <- select_if(the_data1, is.numeric)
View(data_num)
the_data <- the_data %>%
mutate(sx_outcome= recode(sx_outcome, "1"="Failure", "0"="Success" ))
##You need rownames here
kk<-the_data$snum
rownames(the_data1)<-kk
##You need to make sure you do this
i <- sapply(the_data1, is.factor)
the_data1[i] <- lapply(the_data1[i], as.character)
ia <- sapply(the_data1, is.integer)
the_data1[ia] <- lapply(the_data1[ia], as.numeric)
##correction matrix for all the numeric variables
#Weid odd function is not automatically detecting
#method1
cor.mat <- data_num %>% cor_mat()
cor.mat
cor.mat %>% cor_get_pval() #getting significant levels
#method2
cor.pmat <- cor_pmat(the_data1)
cor.mat %>%
cor_reorder() %>%
pull_lower_triangle() %>%
cor_plot(label = TRUE)
#method2
cor.pmat <- cor_pmat(the_data1)
##correction matrix for all the numeric variables
#Weid odd function is not automatically detecting
#method1
cor.mat <- data_num %>% cor_mat()
cor.mat
cor.mat %>% cor_get_pval() #getting significant levels
tapi<-cor.mat %>% cor_get_pval() #getting significant levels
tapi %>%
cor_reorder() %>%
pull_lower_triangle() %>%
cor_plot(label = TRUE)
tapi %>%
cor_reorder() %>%
pull_lower_triangle()
tapi %>%
cor_reorder() %>%
pull_lower_triangle()
tapi %>%
cor_reorder() %>%
pull_lower_triangle()%>%
cor_plot(label = FALSE)
##correction matrix for all the numeric variables
#Weid odd function is not automatically detecting
#method1
cor.mat <- data_num %>% cor_mat()
cor.mat
tapi<-cor.mat %>% cor_get_pval() #getting significant levels
tapi %>%
cor_reorder() %>%
pull_lower_triangle() %>%
cor_plot(label = TRUE)
##correction matrix for all the numeric variables
#Weid odd function is not automatically detecting
#method1
cor.mat <- data_num %>% cor_mat()
cor.mat
tapi<-cor.mat %>% cor_get_pval() #getting significant levels
tapi %>%
cor_reorder() %>%
pull_lower_triangle() %>%
cor_plot(label = TRUE)
cor.mat %>%
cor_reorder() %>%
pull_lower_triangle() %>%
cor_plot(label = TRUE)
cor.mat %>%
cor_reorder() %>%
pull_lower_triangle() %>%
cor_plot(label = FALSE)
##correction matrix for all the numeric variables
#Weid odd function is not automatically detecting
#method1
cor.mat <- data_num %>% cor_mat()
cor.mat
cor.mat %>% cor_get_pval() #getting significant levels
cor.mat %>%
pull_lower_triangle() %>%
cor_plot(label = FALSE)
cor.mat %>% cor_get_pval() %>% p.adjust()#getting significant levels
#outcome variable
model_outcome1 <- the_data1 %>% glm(sx_outcome ~ hydro_etiology, family = binomial, data=.)
class(the_data1$sx_outcome)
class(the_data1$hydro_etiology)
#outcome variable
#No logistic if you wann run glm you need to change both to zero and 1 like this.
the_datan<-as.integer(the_data1)
#outcome variable
#No logistic if you wann run glm you need to change both to zero and 1 like this.
the_data1$sx_outcome<-as.integer(the_data1$sx_outcome)
the_data1 <- subset(the_data, select= -c(snum, place_of_delivery, time_infection))
##You need rownames here
kk<-the_data$snum
ncol(the_data1)
rownames(the_data1)<-kk
##selecting only numeric variables
data_num <- select_if(the_data1, is.numeric)
##You need to make sure you do this
i <- sapply(the_data1, is.factor)
the_data1[i] <- lapply(the_data1[i], as.character)
ia <- sapply(the_data1, is.integer)
the_data1[ia] <- lapply(the_data1[ia], as.numeric)
the_data1$sx_outcome
#outcome variable
#No logistic if you wanna run glm you need to change both to zero and 1 like this
the_data2<-the_data1 %>%
mutate(cat_sx_outcome = case_when(sx_outcome == c("Failure") ~ 0,
sx_outcome == c("Success") ~ 1))
hydro_etiology
the_data1$hydro_etiology
table(the_data1$hydro_etiology)
#outcome variable
#No logistic if you wanna run glm you need to change both to zero and 1 like this will never work as a binomal
#you need to use linear regression here
the_data2<-the_data1 %>%
mutate(cat_sx_outcome = case_when(sx_outcome == c("Failure") ~ 0,
sx_outcome == c("Success") ~ 1))
model_outcome1 <- the_data2 %>% glm(cat_sx_outcome ~ hydro_etiology, data=.)
model_outcome1
summary(model_outcome1)
summary(model_outcome1)
model_outcome1$R
model_outcome1$coefficients
the_data1$hydro_etiology
model_outcome1 <- the_data2 %>% logit(cat_sx_outcome ~ hydro_etiology, data=.)
logit()
model_outcome1 <- the_data2 %>% logit(cat_sx_outcome ~ hydro_etiology,family = binomia(link='logit'), data=.)
model_outcome1 <- the_data2 %>% logit(cat_sx_outcome ~ hydro_etiology,family=binomial(link='logit'), data=.)
model_outcome1 <- the_data2 %>% logit(cat_sx_outcome ~ hydro_etiology,family=binomial(link="logit"), data=.)
model_outcome1 <- the_data2 %>% logit(cat_sx_outcome ~ hydro_etiology,family=binomial(), data=.)
summary(model_outcome1)
model_outcome1 <- the_data2 %>% logit(sx_outcome ~ hydro_etiology,family=binomial(), data=.)
summary(model_outcome1)
model_outcome1$
model_outcome2 <- the_data1 %>% glm(sx_outcome ~ sex , family = binomial, data=.)
#categorical variables
###fisher.test(table(the_data1$sx_outcome, the_data1$sex))
fisher.test(xtabs(~sx_outcome + sex, data=the_data1))
#wilcoxon test
wilcox.test(child_weight~sx_outcome, data=the_data1, exact=FALSE)
#kruskal test for morethan two groups
kruskal.test(child_weight~gest, data=the_data1)
kruskal.test(brain_vol~hydro_etiology, data=the_data1)
boxplot(the_data[, 5:19])+
text(the_data[, 5:19], par("usr")[3] - 0.2, labels = lablist, srt = 45, pos = 1, xpd = TRUE)
boxplot(the_data[, 5:19])+
text(names(the_data[, 5:19]), par("usr")[3] - 0.2, labels = lablist, srt = 45, pos = 1, xpd = TRUE)
names(the_data[, 5:19])
cols_names<-names(the_data[, 5:19])
boxplot(the_data[, 5:19])+
text(cols_names, par("usr")[3] - 0.2, labels = lablist, srt = 45, pos = 1, xpd = TRUE)
picking<-the_data[, 5:19]
boxplot(picking)+
text(picking, par("usr")[3] - 0.2, labels = lablist, srt = 45, pos = 1, xpd = TRUE)
View(picking)
boxplot(picking)+
text(names(picking), par("usr")[3] - 0.2, labels = lablist, srt = 45, pos = 1, xpd = TRUE)
boxplot(picking)
model_outcome1 <- the_data2 %>% glm(cat_sx_outcome ~ hydro_etiology,family=binomial(), data=.)
summary(model_outcome1)
model_outcome1 <- the_data2 %>% logit(cat_sx_outcome ~ hydro_etiology,family=binomial(), data=.)
model_outcome1 <- the_data2 %>% glm(cat_sx_outcome ~ hydro_etiology,family=binomial(), data=.)
summary(model_outcome1)
model_outcome1 <- the_data2 %>% glm(sx_outcome ~ hydro_etiology,family=binomial(), data=.)
class(the_data1$sx_outcome)
the_data2$sx_outcome_fac<-factor(the_data2$sx_outcome)
model_outcome1 <- the_data2 %>% glm(sx_outcome_fac ~ hydro_etiology,family=binomial(), data=.)
model_outcome1 <- the_data2 %>% glm(sx_outcome ~ hydro_etiology,family=binomial(), data=.)
model_outcome1 <- the_data2 %>% glm(sx_outcome ~ hydro_etiology,family=binomial(), data=.)
model_outcome1 <- the_data2 %>% glm(sx_outcome_fac ~ hydro_etiology,family=binomial(), data=.)
hydro_etiology
data2$hydro_etiology
the_data2$hydro_etiology
table(the_data2$hydro_etiology)
#⁡ ( p / ( 1 − p ) ) \log(p / (1-p)) log(p/(1−p))
model_outcome1 <- the_data2 %>% glm(sx_outcome ~ hydro_etiology,family=binomial(), data=.)
#⁡ ( p / ( 1 − p ) ) \log(p / (1-p)) log(p/(1−p))
model_outcome1 <- the_data2 %>% glm(cat_sx_outcome ~ hydro_etiology,family=binomial(), data=.)
summary(model_outcome1)
lm(formula = rank(cat_sx_outcome) ~ hydro_etiology, data = the_data2)
model_outcome1$R
summary(lm(formula = rank(cat_sx_outcome) ~ hydro_etiology, data = the_data2))
summary(kruskal.test(cat_sx_outcome~hydro_etiology, data=the_data2))
kruskal.test(cat_sx_outcome~hydro_etiology, data=the_data2)
model_outcome1
summary(model_outcome1)
